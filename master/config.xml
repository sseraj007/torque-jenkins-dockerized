<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.1"/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.83">
    <script>def spaceName = &quot;%SPACE%&quot;
pipeline {
   agent any

   stages {
        stage(&apos;Cleanup&apos;) {
            steps {
                sh &quot;&quot;&quot;
                rm -rf ./*
                &quot;&quot;&quot;
            }
        }
        stage(&apos;Checkout&apos;) {
            steps {
                dir(&quot;API&quot;) {
                    git &apos;https://github.com/sseraj007/secrets-mgr&apos;
                }
            }
        }
        stage(&apos;Build&apos;) {
            steps {
                dir(&quot;API&quot;) {
                    sh &quot;&quot;&quot;
                    dotnet clean --configuration Release
                    dotnet build --configuration Release AWS.SecretMgr.sln
                    &quot;&quot;&quot;
                }
            }
        }
        stage(&apos;Publish artifacts&apos;) {
            steps {
                dir(&quot;API/AWS.SecretMgr/bin/Release/netcoreapp3.1&quot;) {
                    sh &quot;&quot;&quot;
                    mkdir drop
                    tar -czvf drop/secrets-manager-api.tar.gz --exclude=./drop .
                    tar -czvf secrets-manager-api.tar.gz drop/secrets-manager-api.tar.gz
                    aws s3 cp secrets-manager-api.tar.gz s3://%BUCKET_NAME%/secrets-manager/latest/
                    &quot;&quot;&quot;
                }
            }
        }
        stage(&apos;Integration Tests&apos;) {
            steps {                
                script {

                    def newSandboxData = null

                    try {
                        //Start Sandbox
                        //TODO replace latest with current artifact from Build stage 
                        newSandboxData = colony.blueprint(
                            spaceName,                           // space name
                            &apos;secrets-api-aws&apos;,               // blueprint name
                            &apos;pm-test-sandbox-&apos; + env.BUILD_NUMBER,  // sandbox name
                            &apos;PT2H&apos;,                                 // sandbox duration according to ISO 8601 duration
                            [&apos;secrets-manager-api&apos;: &apos;secrets-manager/latest/secrets-manager-api.tar.gz&apos;],    
                            [&apos;PORT&apos;: &apos;3000&apos;, &apos;API_PORT&apos;: &apos;3001&apos;, &apos;RELEASE_NUMBER&apos;: &apos;none&apos;, &apos;API_BUILD_NUMBER&apos;: env.BUILD_NUMBER, &apos;AWS_INSTANCE_TYPE&apos;: &apos;t3.large&apos;],       // inputs
                            30)                                                                                                         // timeout
                            .startSandbox()

                        def endpoint = getEndpoint(newSandboxData)

                        echo &apos;Running integration tests against endpoint: &apos; + endpoint

                        // TBD - run tests
                    }
                    catch(Exception e) {
                        if (newSandboxData != null) {
                            colony.endSandbox(spaceName, newSandboxData.id)
                        }
                        print e.getClass().getName()
                        print e.message
                        throw e
                    }
                    finally {
                        if (newSandboxData != null) {
                            colony.endSandbox(spaceName, newSandboxData.id)
                        }
                    }
                }                
            }
        }
   }
}
// get the first application shortcut for the UI app
def getEndpoint(def newSandboxData) {
    
    def endpoint = &apos;&apos;

    for (app in newSandboxData.applications) {
        if (app.name == &apos;promotions-manager-ui&apos;) {
            endpoint = app.shortcuts[0]
            break
        }
    }

    if (endpoint == &apos;&apos;) {
        throw new Exception(&apos;couldnt get application endpoint from sandbox details&apos;)
    }

    return endpoint
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
